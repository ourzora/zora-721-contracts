{
  "address": "0xce6525630B6cBC45F7DdC204a59022d8E39f560E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencoded",
          "type": "bytes"
        }
      ],
      "name": "base64Encode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataEdition",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mediaData",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataJSON",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "encodeMetadataJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "numberToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe429a2fbfd36651f854529d94912fe0493043c32f270a4f5ac1abbc4f3998878",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0xce6525630B6cBC45F7DdC204a59022d8E39f560E",
    "transactionIndex": 2,
    "gasUsed": "763233",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018020000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000800000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000040000000000000000000000000000000000000024000000000000000000001000004000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x93b8367e0750a32d1d12c9f9bbad8bd59599d2ab8f73869b6bdc5a2441b57118",
    "transactionHash": "0xe429a2fbfd36651f854529d94912fe0493043c32f270a4f5ac1abbc4f3998878",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 20345856,
        "transactionHash": "0xe429a2fbfd36651f854529d94912fe0493043c32f270a4f5ac1abbc4f3998878",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000015b1403ec4500000000000000000000000000000000000000000000000000001ce4751d31ae000000000000000000000000000000000000000000000000000003c4bff655eb2c000000000000000000000000000000000000000000000000001b89611945690000000000000000000000000000000000000000000000000000051fd3fa42302c0",
        "logIndex": 3,
        "blockHash": "0x93b8367e0750a32d1d12c9f9bbad8bd59599d2ab8f73869b6bdc5a2441b57118"
      }
    ],
    "blockNumber": 20345856,
    "cumulativeGasUsed": "805857",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "59f44a7f503ecd3b58b2a55e303c3f9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencoded\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataEdition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mediaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataJSON\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"encodeMetadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Can safely be used for generic base64Encode and numberToString functions\",\"kind\":\"dev\",\"methods\":{\"base64Encode(bytes)\":{\"params\":{\"unencoded\":\"bytes to base64-encode\"}},\"createMetadataEdition(string,string,string,string,uint256,uint256)\":{\"params\":{\"animationUrl\":\"URL of animation to render for edition\",\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"imageUrl\":\"URL of image to render for edition\",\"name\":\"Name of NFT in metadata\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"mediaData\":\"Data for media to include in json object\",\"name\":\"Name of NFT in metadata\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"encodeMetadataJSON(bytes)\":{\"params\":{\"json\":\"Raw json to base64 and turn into a data-uri\"}},\"numberToString(uint256)\":{\"params\":{\"value\":\"number to return as a string\"}},\"tokenMediaData(string,string,uint256)\":{\"params\":{\"animationUrl\":\"URL of animation to render for edition\",\"imageUrl\":\"URL of image to render for edition\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMetadataEdition(string,string,string,string,uint256,uint256)\":{\"notice\":\"Generate edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"notice\":\"Function to create the metadata json string for the nft edition\"},\"encodeMetadataJSON(bytes)\":{\"notice\":\"Encodes the argument json bytes into base64-data uri format\"},\"numberToString(uint256)\":{\"notice\":\"Proxy to openzeppelin's toString function\"},\"tokenMediaData(string,string,uint256)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata\"}},\"notice\":\"Shared NFT logic for rendering metadata associated with editions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SharedNFTLogic.sol\":\"SharedNFTLogic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x06366259a2fb13f4c6adca23766db74eadab3dc89ad25773b9c1ff7fa64507da\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfEdition\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x83e3bc6128feb3bffafbef4f9d6fc821853127e6f614bb3727560f6b043d4be2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cd9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063170dc6601461006757806358464f3014610090578063d01fde8c146100a3578063d5fb1b19146100b6578063df30dba0146100c9578063eb111ab6146100dc575b600080fd5b61007a6100753660046107b5565b6100ef565b6040516100879190610b37565b60405180910390f35b61007a61009e3660046106b0565b610100565b61007a6100b13660046105aa565b61017c565b61007a6100c43660046105aa565b6101ad565b61007a6100d73660046105f2565b6101b8565b61007a6100ea366004610749565b6101f0565b60606100fa826102a9565b92915050565b606080821561013457610112836100ef565b6040516020016101229190610aa0565b60405160208183030381529060405290505b8661013e856100ef565b82888861014a896100ef565b8c6040516020016101619796959493929190610937565b60405160208183030381529060405291505095945050505050565b6060610187826101ad565b6040516020016101979190610a5b565b6040516020818303038152906040529050919050565b60606100fa826103ae565b606060006101c78686866101f0565b905060006101d88989848888610100565b90506101e38161017c565b9998505050505050505050565b825182516060911580159115159082906102075750805b1561024b5785610216856100ef565b86610220876100ef565b604051602001610233949392919061087c565b604051602081830303815290604052925050506102a2565b811561026c578561025b856100ef565b604051602001610233929190610816565b801561028d578461027c856100ef565b604051602001610233929190610ac9565b60405180602001604052806000815250925050505b9392505050565b6060816102cd5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102f757806102e181610bdc565b91506102f09050600a83610b62565b91506102d1565b6000816001600160401b0381111561031157610311610c4d565b6040519080825280601f01601f19166020018201604052801561033b576020820181803683370190505b5090505b84156103a657610350600183610b95565b915061035d600a86610bf7565b610368906030610b4a565b60f81b81838151811061037d5761037d610c37565b60200101906001600160f81b031916908160001a90535061039f600a86610b62565b945061033f565b949350505050565b60608151600014156103ce57505060408051602081019091526000815290565b6000604051806060016040528060408152602001610c6460409139905060006003845160026103fd9190610b4a565b6104079190610b62565b610412906004610b76565b90506000610421826020610b4a565b6001600160401b0381111561043857610438610c4d565b6040519080825280601f01601f191660200182016040528015610462576020820181803683370190505b509050818152600183018586518101602084015b818310156104d05760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610476565b6003895106600181146104ea57600281146104fb57610507565b613d3d60f01b600119830152610507565b603d60f81b6000198301525b509398975050505050505050565b60006001600160401b038084111561052f5761052f610c4d565b604051601f8501601f19908116603f0116810190828211818310171561055757610557610c4d565b8160405280935085815286868601111561057057600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261059b57600080fd5b6102a283833560208501610515565b6000602082840312156105bc57600080fd5b81356001600160401b038111156105d257600080fd5b8201601f810184136105e357600080fd5b6103a684823560208401610515565b60008060008060008060c0878903121561060b57600080fd5b86356001600160401b038082111561062257600080fd5b61062e8a838b0161058a565b9750602089013591508082111561064457600080fd5b6106508a838b0161058a565b9650604089013591508082111561066657600080fd5b6106728a838b0161058a565b9550606089013591508082111561068857600080fd5b5061069589828a0161058a565b9350506080870135915060a087013590509295509295509295565b600080600080600060a086880312156106c857600080fd5b85356001600160401b03808211156106df57600080fd5b6106eb89838a0161058a565b9650602088013591508082111561070157600080fd5b61070d89838a0161058a565b9550604088013591508082111561072357600080fd5b506107308882890161058a565b9598949750949560608101359550608001359392505050565b60008060006060848603121561075e57600080fd5b83356001600160401b038082111561077557600080fd5b6107818783880161058a565b9450602086013591508082111561079757600080fd5b506107a48682870161058a565b925050604084013590509250925092565b6000602082840312156107c757600080fd5b5035919050565b600081518084526107e6816020860160208601610bac565b601f01601f19169290920160200192915050565b6000815161080c818560208601610bac565b9290920192915050565b6834b6b0b3b2911d101160b91b8152825160009061083b816009850160208801610bac565b633f69643d60e01b600991840191820152835161085f81600d840160208801610bac565b631116101160e11b600d9290910191820152601101949350505050565b6834b6b0b3b2911d101160b91b815284516000906108a1816009850160208a01610bac565b8083019050633f69643d60e01b80600983015286516108c781600d850160208b01610bac565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600d939091019283015285516108fd816022850160208a01610bac565b60229201918201528351610918816026840160208801610bac565b631116101160e11b60269290910191820152602a019695505050505050565b693d913730b6b2911d101160b11b8152875160009061095d81600a850160208d01610bac565b600160fd1b600a91840191820152885161097e81600b840160208d01610bac565b885191019061099481600b840160208c01610bac565b631116101160e11b600b929091019182018190526e3232b9b1b934b83a34b7b7111d101160891b600f83015287516109d381601e850160208c01610bac565b601e920191820152610a4d610a3e610a38610a21610a1b6109f7602287018c6107fa565b770383937b832b93a34b2b9911d103d91373ab6b132b9111d160451b815260180190565b896107fa565b6a1610113730b6b2911d101160a91b8152600b0190565b866107fa565b62227d7d60e81b815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610a9381601d850160208701610bac565b91909101601d0192915050565b602f60f81b815260008251610abc816001850160208701610bac565b9190910160010192915050565b7030b734b6b0ba34b7b72fbab936111d101160791b81528251600090610af6816011850160208801610bac565b633f69643d60e01b6011918401918201528351610b1a816015840160208801610bac565b631116101160e11b60159290910191820152601901949350505050565b6020815260006102a260208301846107ce565b60008219821115610b5d57610b5d610c0b565b500190565b600082610b7157610b71610c21565b500490565b6000816000190483118215151615610b9057610b90610c0b565b500290565b600082821015610ba757610ba7610c0b565b500390565b60005b83811015610bc7578181015183820152602001610baf565b83811115610bd6576000848401525b50505050565b6000600019821415610bf057610bf0610c0b565b5060010190565b600082610c0657610c06610c21565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202fa3e1adbf7da8291be97c224f8ab72d68715eadc78b987f0d1e2a5dcee523f264736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063170dc6601461006757806358464f3014610090578063d01fde8c146100a3578063d5fb1b19146100b6578063df30dba0146100c9578063eb111ab6146100dc575b600080fd5b61007a6100753660046107b5565b6100ef565b6040516100879190610b37565b60405180910390f35b61007a61009e3660046106b0565b610100565b61007a6100b13660046105aa565b61017c565b61007a6100c43660046105aa565b6101ad565b61007a6100d73660046105f2565b6101b8565b61007a6100ea366004610749565b6101f0565b60606100fa826102a9565b92915050565b606080821561013457610112836100ef565b6040516020016101229190610aa0565b60405160208183030381529060405290505b8661013e856100ef565b82888861014a896100ef565b8c6040516020016101619796959493929190610937565b60405160208183030381529060405291505095945050505050565b6060610187826101ad565b6040516020016101979190610a5b565b6040516020818303038152906040529050919050565b60606100fa826103ae565b606060006101c78686866101f0565b905060006101d88989848888610100565b90506101e38161017c565b9998505050505050505050565b825182516060911580159115159082906102075750805b1561024b5785610216856100ef565b86610220876100ef565b604051602001610233949392919061087c565b604051602081830303815290604052925050506102a2565b811561026c578561025b856100ef565b604051602001610233929190610816565b801561028d578461027c856100ef565b604051602001610233929190610ac9565b60405180602001604052806000815250925050505b9392505050565b6060816102cd5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102f757806102e181610bdc565b91506102f09050600a83610b62565b91506102d1565b6000816001600160401b0381111561031157610311610c4d565b6040519080825280601f01601f19166020018201604052801561033b576020820181803683370190505b5090505b84156103a657610350600183610b95565b915061035d600a86610bf7565b610368906030610b4a565b60f81b81838151811061037d5761037d610c37565b60200101906001600160f81b031916908160001a90535061039f600a86610b62565b945061033f565b949350505050565b60608151600014156103ce57505060408051602081019091526000815290565b6000604051806060016040528060408152602001610c6460409139905060006003845160026103fd9190610b4a565b6104079190610b62565b610412906004610b76565b90506000610421826020610b4a565b6001600160401b0381111561043857610438610c4d565b6040519080825280601f01601f191660200182016040528015610462576020820181803683370190505b509050818152600183018586518101602084015b818310156104d05760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610476565b6003895106600181146104ea57600281146104fb57610507565b613d3d60f01b600119830152610507565b603d60f81b6000198301525b509398975050505050505050565b60006001600160401b038084111561052f5761052f610c4d565b604051601f8501601f19908116603f0116810190828211818310171561055757610557610c4d565b8160405280935085815286868601111561057057600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261059b57600080fd5b6102a283833560208501610515565b6000602082840312156105bc57600080fd5b81356001600160401b038111156105d257600080fd5b8201601f810184136105e357600080fd5b6103a684823560208401610515565b60008060008060008060c0878903121561060b57600080fd5b86356001600160401b038082111561062257600080fd5b61062e8a838b0161058a565b9750602089013591508082111561064457600080fd5b6106508a838b0161058a565b9650604089013591508082111561066657600080fd5b6106728a838b0161058a565b9550606089013591508082111561068857600080fd5b5061069589828a0161058a565b9350506080870135915060a087013590509295509295509295565b600080600080600060a086880312156106c857600080fd5b85356001600160401b03808211156106df57600080fd5b6106eb89838a0161058a565b9650602088013591508082111561070157600080fd5b61070d89838a0161058a565b9550604088013591508082111561072357600080fd5b506107308882890161058a565b9598949750949560608101359550608001359392505050565b60008060006060848603121561075e57600080fd5b83356001600160401b038082111561077557600080fd5b6107818783880161058a565b9450602086013591508082111561079757600080fd5b506107a48682870161058a565b925050604084013590509250925092565b6000602082840312156107c757600080fd5b5035919050565b600081518084526107e6816020860160208601610bac565b601f01601f19169290920160200192915050565b6000815161080c818560208601610bac565b9290920192915050565b6834b6b0b3b2911d101160b91b8152825160009061083b816009850160208801610bac565b633f69643d60e01b600991840191820152835161085f81600d840160208801610bac565b631116101160e11b600d9290910191820152601101949350505050565b6834b6b0b3b2911d101160b91b815284516000906108a1816009850160208a01610bac565b8083019050633f69643d60e01b80600983015286516108c781600d850160208b01610bac565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600d939091019283015285516108fd816022850160208a01610bac565b60229201918201528351610918816026840160208801610bac565b631116101160e11b60269290910191820152602a019695505050505050565b693d913730b6b2911d101160b11b8152875160009061095d81600a850160208d01610bac565b600160fd1b600a91840191820152885161097e81600b840160208d01610bac565b885191019061099481600b840160208c01610bac565b631116101160e11b600b929091019182018190526e3232b9b1b934b83a34b7b7111d101160891b600f83015287516109d381601e850160208c01610bac565b601e920191820152610a4d610a3e610a38610a21610a1b6109f7602287018c6107fa565b770383937b832b93a34b2b9911d103d91373ab6b132b9111d160451b815260180190565b896107fa565b6a1610113730b6b2911d101160a91b8152600b0190565b866107fa565b62227d7d60e81b815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610a9381601d850160208701610bac565b91909101601d0192915050565b602f60f81b815260008251610abc816001850160208701610bac565b9190910160010192915050565b7030b734b6b0ba34b7b72fbab936111d101160791b81528251600090610af6816011850160208801610bac565b633f69643d60e01b6011918401918201528351610b1a816015840160208801610bac565b631116101160e11b60159290910191820152601901949350505050565b6020815260006102a260208301846107ce565b60008219821115610b5d57610b5d610c0b565b500190565b600082610b7157610b71610c21565b500490565b6000816000190483118215151615610b9057610b90610c0b565b500290565b600082821015610ba757610ba7610c0b565b500390565b60005b83811015610bc7578181015183820152602001610baf565b83811115610bd6576000848401525b50505050565b6000600019821415610bf057610bf0610c0b565b5060010190565b600082610c0657610c06610c21565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202fa3e1adbf7da8291be97c224f8ab72d68715eadc78b987f0d1e2a5dcee523f264736f6c63430008060033",
  "devdoc": {
    "details": "Can safely be used for generic base64Encode and numberToString functions",
    "kind": "dev",
    "methods": {
      "base64Encode(bytes)": {
        "params": {
          "unencoded": "bytes to base64-encode"
        }
      },
      "createMetadataEdition(string,string,string,string,uint256,uint256)": {
        "params": {
          "animationUrl": "URL of animation to render for edition",
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "imageUrl": "URL of image to render for edition",
          "name": "Name of NFT in metadata",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "mediaData": "Data for media to include in json object",
          "name": "Name of NFT in metadata",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "encodeMetadataJSON(bytes)": {
        "params": {
          "json": "Raw json to base64 and turn into a data-uri"
        }
      },
      "numberToString(uint256)": {
        "params": {
          "value": "number to return as a string"
        }
      },
      "tokenMediaData(string,string,uint256)": {
        "params": {
          "animationUrl": "URL of animation to render for edition",
          "imageUrl": "URL of image to render for edition"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createMetadataEdition(string,string,string,string,uint256,uint256)": {
        "notice": "Generate edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "notice": "Function to create the metadata json string for the nft edition"
      },
      "encodeMetadataJSON(bytes)": {
        "notice": "Encodes the argument json bytes into base64-data uri format"
      },
      "numberToString(uint256)": {
        "notice": "Proxy to openzeppelin's toString function"
      },
      "tokenMediaData(string,string,uint256)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata"
      }
    },
    "notice": "Shared NFT logic for rendering metadata associated with editions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x469485A14999F0dDbd551430a7B4E361dC4D5589",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SharedNFTLogic",
          "name": "_sharedNFTLogic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_animationUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_animationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBPS",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setApprovedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_animationUrl",
          "type": "string"
        }
      ],
      "name": "updateEditionURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x88987ac678177b7ba49161af83cc4381221c7b21ac9ef93d865d1bb117911985",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0x469485A14999F0dDbd551430a7B4E361dC4D5589",
    "transactionIndex": 0,
    "gasUsed": "2274178",
    "logsBloom": "0x
    "blockHash": "0x7bb41d2541cd08a8035dc92022d8e46b70dcc5f2f7403634d4df64e58a2f9dab",
    "transactionHash": "0x88987ac678177b7ba49161af83cc4381221c7b21ac9ef93d865d1bb117911985",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20345861,
        "transactionHash": "0x88987ac678177b7ba49161af83cc4381221c7b21ac9ef93d865d1bb117911985",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000040a2d29ec4a00000000000000000000000000000000000000000000000000001b896119456900000000000000000000000000000000000000000000000000000a4dc50985a2ac00000000000000000000000000000000000000000000000000177f33ef591f00000000000000000000000000000000000000000000000000000e57f23371ecac0",
        "logIndex": 0,
        "blockHash": "0x7bb41d2541cd08a8035dc92022d8e46b70dcc5f2f7403634d4df64e58a2f9dab"
      }
    ],
    "blockNumber": 20345861,
    "cumulativeGasUsed": "2274178",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xce6525630B6cBC45F7DdC204a59022d8E39f560E"
  ],
  "solcInputHash": "59f44a7f503ecd3b58b2a55e303c3f9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SharedNFTLogic\",\"name\":\"_sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBPS\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setApprovedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"}],\"name\":\"updateEditionURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"iain nash Repository: https://github.com/ourzora/nft-editions\",\"details\":\"This allows creators to mint a unique serial edition of the same media within a custom contract\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn User burn function for token id \"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getURIs()\":{\"details\":\"Get URIs for edition NFT\",\"returns\":{\"_0\":\"imageUrl, imageHash, animationUrl, animationHash\"}},\"initialize(address,string,string,string,string,bytes32,string,bytes32,uint256,uint256)\":{\"details\":\"Function to create a new edition. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the edition. This can be re-assigned or updated later\",\"params\":{\"_animationHash\":\"The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\",\"_animationUrl\":\"Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\",\"_description\":\"Description of edition, used in the description field of the NFT\",\"_editionSize\":\"Number of editions that can be minted in total. If 0, unlimited editions can be minted.\",\"_imageHash\":\"SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\",\"_imageUrl\":\"Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.\",\"_name\":\"Name of edition, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\",\"_owner\":\"User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\",\"_royaltyBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty.\",\"_symbol\":\"Symbol of the new token contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintEdition(address)\":{\"details\":\"This mints one edition to the given address by an allowed minter on the edition instance.\",\"params\":{\"to\":\"address to send the newly minted edition to\"}},\"mintEditions(address[])\":{\"details\":\"This mints multiple editions to the given list of addresses.\",\"params\":{\"recipients\":\"list of addresses to send the newly minted editions to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchase()\":{\"details\":\"This allows the user to purchase a edition edition at the given price in the contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty information for token\",\"params\":{\"_salePrice\":\"Sale price for the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setApprovedMinter(address,bool)\":{\"details\":\"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.\",\"params\":{\"allowed\":\"boolean if that address is allowed to mint\",\"minter\":\"address to set approved minting status for\"}},\"setSalePrice(uint256)\":{\"details\":\"This sets a simple ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"totalSupply()\":{\"details\":\"returns the number of minted tokens within the edition\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEditionURLs(string,string)\":{\"details\":\"Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated.\"},\"withdraw()\":{\"details\":\"This withdraws ETH from the contract to the contract owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"numberCanMint()\":{\"notice\":\"Returns the number of editions allowed to mint (max_uint256 when open edition)\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"}},\"notice\":\"This is a smart contract for handling dynamic contract minting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleEditionMintable.sol\":\"SingleEditionMintable\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x8a09e65be621a4b0f7eb92337759d2ebe1152519d8f0606ad36d4ad497e0be59\",\"license\":\"GPL-3.0\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x06366259a2fb13f4c6adca23766db74eadab3dc89ad25773b9c1ff7fa64507da\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfEdition\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x83e3bc6128feb3bffafbef4f9d6fc821853127e6f614bb3727560f6b043d4be2\",\"license\":\"GPL-3.0\"},\"contracts/SingleEditionMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588\\n\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {SharedNFTLogic} from \\\"./SharedNFTLogic.sol\\\";\\nimport {IEditionSingleMintable} from \\\"./IEditionSingleMintable.sol\\\";\\n\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    @dev This allows creators to mint a unique serial edition of the same media within a custom contract\\n    @author iain nash\\n    Repository: https://github.com/ourzora/nft-editions\\n*/\\ncontract SingleEditionMintable is\\n    ERC721Upgradeable,\\n    IEditionSingleMintable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n\\n    // metadata\\n    string private description;\\n\\n    // Media Urls\\n    // animation_url field in the metadata\\n    string private animationUrl;\\n    // Hash for the associated animation\\n    bytes32 private animationHash;\\n    // Image in the metadata\\n    string private imageUrl;\\n    // Hash for the associated image\\n    bytes32 private imageHash;\\n\\n    // Total size of edition that can be minted\\n    uint256 public editionSize;\\n    // Current token id minted\\n    CountersUpgradeable.Counter private atEditionId;\\n    // Royalty amount in bps\\n    uint256 royaltyBPS;\\n    // Addresses allowed to mint edition\\n    mapping(address => bool) allowedMinters;\\n\\n    // Price for sale\\n    uint256 public salePrice;\\n\\n    // NFT rendering logic contract\\n    SharedNFTLogic private immutable sharedNFTLogic;\\n\\n    // Global constructor for factory\\n    constructor(SharedNFTLogic _sharedNFTLogic) {\\n        sharedNFTLogic = _sharedNFTLogic;\\n    }\\n\\n    /**\\n      @param _owner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\\n      @param _name Name of edition, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _description Description of edition, used in the description field of the NFT\\n      @param _imageUrl Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.\\n      @param _imageHash SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\\n      @param _animationUrl Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\\n      @param _animationHash The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\\n      @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @dev Function to create a new edition. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the edition.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n        description = _description;\\n        animationUrl = _animationUrl;\\n        animationHash = _animationHash;\\n        imageUrl = _imageUrl;\\n        imageHash = _imageHash;\\n        editionSize = _editionSize;\\n        royaltyBPS = _royaltyBPS;\\n        // Set edition id start to be 1 not 0\\n        atEditionId.increment();\\n    }\\n\\n\\n    /// @dev returns the number of minted tokens within the edition\\n    function totalSupply() public view returns (uint256) {\\n        return atEditionId.current() - 1;\\n    }\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through ISingleEditionMintable interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase a edition edition\\n           at the given price in the contract.\\n     */\\n    function purchase() external payable returns (uint256) {\\n        require(salePrice > 0, \\\"Not for sale\\\");\\n        require(msg.value == salePrice, \\\"Wrong price\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = msg.sender;\\n        emit EditionSold(salePrice, msg.sender);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\\n        salePrice = _salePrice;\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        // No need for gas limit to trusted address.\\n        AddressUpgradeable.sendValue(payable(owner()), address(this).balance);\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (owner() == msg.sender) {\\n            return true;\\n        }\\n        if (allowedMinters[address(0x0)]) {\\n            return true;\\n        }\\n        return allowedMinters[msg.sender];\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to) external override returns (uint256) {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = to;\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(address[] memory recipients)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        return _mintEditions(recipients);\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IEditionSingleMintable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\n        allowedMinters[minter] = allowed;\\n    }\\n\\n    /**\\n      @dev Allows for updates of edition urls by the owner of the edition.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n     */\\n    function updateEditionURLs(\\n        string memory _imageUrl,\\n        string memory _animationUrl\\n    ) public onlyOwner {\\n        imageUrl = _imageUrl;\\n        animationUrl = _animationUrl;\\n    }\\n\\n    /// Returns the number of editions allowed to mint (max_uint256 when open edition)\\n    function numberCanMint() public view override returns (uint256) {\\n        // Return max int if open edition\\n        if (editionSize == 0) {\\n            return type(uint256).max;\\n        }\\n        // atEditionId is one-indexed hence the need to remove one here\\n        return editionSize + 1 - atEditionId.current();\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n      @dev Private function to mint als without any access checks.\\n           Called by the public edition minting functions.\\n     */\\n    function _mintEditions(address[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 startAt = atEditionId.current();\\n        uint256 endAt = startAt + recipients.length - 1;\\n        require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\n        while (atEditionId.current() <= endAt) {\\n            _mint(\\n                recipients[atEditionId.current() - startAt],\\n                atEditionId.current()\\n            );\\n            atEditionId.increment();\\n        }\\n        return atEditionId.current();\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT\\n      @return imageUrl, imageHash, animationUrl, animationHash\\n     */\\n    function getURIs()\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        return (imageUrl, imageHash, animationUrl, animationHash);\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                imageUrl,\\n                animationUrl,\\n                tokenId,\\n                editionSize\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0023bce847684ac1287ce1c1831c89fc3d47b33bc68c67df32cca3573bb4accd\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620028c0380380620028c083398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007c565b6000602082840312156200005d57600080fd5b81516001600160a01b03811681146200007557600080fd5b9392505050565b60805160601c6128256200009b60003960006110a101526128256000f3fe6080604052600436106101985760003560e01c806342966c68116100e2578063a66ff0af11610085578063a66ff0af14610486578063b88d4fde146104a6578063c87b56dd146104c6578063e444bfcc146104e6578063e985e9c514610506578063f2fde38b14610526578063f4ed0f4614610546578063f51f96dd1461055c57600080fd5b806342966c68146103bf5780636352211e146103df57806364edfbf0146103ff57806370a0823114610407578063715018a6146104275780638da5cb5b1461043c57806395d89b4114610451578063a22cb4651461046657600080fd5b80631919fed71161014a5780631919fed7146102a657806323b872dd146102c657806325f0ea90146102e657806328c5440f1461030657806329ec16dd1461032b5780632a55205a1461034b5780633ccfd60b1461038a57806342842e0e1461039f57600080fd5b806301ffc9a71461019d57806306fdde03146101d2578063081812fc146101f4578063095ea7b31461022c5780630b65b6e71461024e5780630f6a93491461027157806318160ddd14610291575b600080fd5b3480156101a957600080fd5b506101bd6101b83660046121e2565b610572565b60405190151581526020015b60405180910390f35b3480156101de57600080fd5b506101e761059d565b6040516101c99190612439565b34801561020057600080fd5b5061021461020f3660046122f5565b61062f565b6040516001600160a01b0390911681526020016101c9565b34801561023857600080fd5b5061024c610247366004612105565b6106bc565b005b34801561025a57600080fd5b506102636107cd565b6040519081526020016101c9565b34801561027d57600080fd5b5061026361028c36600461212f565b610801565b34801561029d57600080fd5b50610263610830565b3480156102b257600080fd5b5061024c6102c13660046122f5565b61083d565b3480156102d257600080fd5b5061024c6102e1366004611f08565b6108a7565b3480156102f257600080fd5b5061024c610301366004611ffb565b6108d9565b34801561031257600080fd5b5061031b6109c8565b6040516101c9949392919061244c565b34801561033757600080fd5b5061024c610346366004611fbf565b610b00565b34801561035757600080fd5b5061036b61036636600461230e565b610b5a565b604080516001600160a01b0390931683526020830191909152016101c9565b34801561039657600080fd5b5061024c610bb7565b3480156103ab57600080fd5b5061024c6103ba366004611f08565b610bf9565b3480156103cb57600080fd5b5061024c6103da3660046122f5565b610c14565b3480156103eb57600080fd5b506102146103fa3660046122f5565b610c64565b610263610cdb565b34801561041357600080fd5b50610263610422366004611eba565b610df5565b34801561043357600080fd5b5061024c610e7c565b34801561044857600080fd5b50610214610eb5565b34801561045d57600080fd5b506101e7610ec9565b34801561047257600080fd5b5061024c610481366004611fbf565b610ed8565b34801561049257600080fd5b506102636104a1366004611eba565b610f99565b3480156104b257600080fd5b5061024c6104c1366004611f44565b611025565b3480156104d257600080fd5b506101e76104e13660046122f5565b61105d565b3480156104f257600080fd5b5061024c610501366004612292565b611155565b34801561051257600080fd5b506101bd610521366004611ed5565b6111ab565b34801561053257600080fd5b5061024c610541366004611eba565b6111d9565b34801561055257600080fd5b5061026360ce5481565b34801561056857600080fd5b5061026360d25481565b600063152a902d60e11b6001600160e01b031983161480610597575061059782611276565b92915050565b6060606580546105ac9061273c565b80601f01602080910402602001604051908101604052809291908181526020018280546105d89061273c565b80156106255780601f106105fa57610100808354040283529160200191610625565b820191906000526020600020905b81548152906001019060200180831161060857829003601f168201915b5050505050905090565b600061063a826112c6565b6106a05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006106c782610c64565b9050806001600160a01b0316836001600160a01b031614156107355760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610697565b336001600160a01b0382161480610751575061075181336111ab565b6107be5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610697565b6107c883836112e3565b505050565b600060ce54600014156107e1575060001990565b60cf5460ce546107f29060016126a0565b6107fc91906126f9565b905090565b600061080b611351565b6108275760405162461bcd60e51b8152600401610697906125c1565b610597826113c0565b600060016107f260cf5490565b33610846610eb5565b6001600160a01b03161461086c5760405162461bcd60e51b81526004016106979061258c565b60d28190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6108b2335b826114a1565b6108ce5760405162461bcd60e51b8152600401610697906125f8565b6107c8838383611563565b600054610100900460ff16806108f2575060005460ff16155b61090e5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015610930576000805461ffff19166101011790555b61093a8a8a6116f1565b610942611778565b61094b8b6111d9565b875161095e9060c99060208b0190611da7565b5086516109729060ca9060208a0190611da7565b5060cb869055845161098b9060cc906020880190611da7565b5060cd84905560ce83905560d08290556109a960cf80546001019055565b80156109bb576000805461ff00191690555b5050505050505050505050565b606060006060600060cc60cd5460ca60cb548380546109e69061273c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a129061273c565b8015610a5f5780601f10610a3457610100808354040283529160200191610a5f565b820191906000526020600020905b815481529060010190602001808311610a4257829003601f168201915b50505050509350818054610a729061273c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9e9061273c565b8015610aeb5780601f10610ac057610100808354040283529160200191610aeb565b820191906000526020600020905b815481529060010190602001808311610ace57829003601f168201915b50505050509150935093509350935090919293565b33610b09610eb5565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016106979061258c565b6001600160a01b0391909116600090815260d160205260409020805460ff1916911515919091179055565b60008080610b66610eb5565b6001600160a01b03161415610b8857610b7d610eb5565b600091509150610bb0565b610b90610eb5565b61271060d05485610ba191906126da565b610bab91906126b8565b915091505b9250929050565b33610bc0610eb5565b6001600160a01b031614610be65760405162461bcd60e51b81526004016106979061258c565b610bf7610bf1610eb5565b476117f3565b565b6107c883838360405180602001604052806000815250611025565b610c1d336108ac565b610c585760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b6044820152606401610697565b610c618161190c565b50565b6000818152606760205260408120546001600160a01b0316806105975760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610697565b60008060d25411610d1d5760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b6044820152606401610697565b60d2543414610d5c5760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720707269636560a81b6044820152606401610697565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110610d9257610d9261278d565b6001600160a01b0390921660209283029190910182015260d2546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1610def816113c0565b91505090565b60006001600160a01b038216610e605760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610697565b506001600160a01b031660009081526068602052604090205490565b33610e85610eb5565b6001600160a01b031614610eab5760405162461bcd60e51b81526004016106979061258c565b610bf76000611995565b60006107fc6097546001600160a01b031690565b6060606680546105ac9061273c565b6001600160a01b038216331415610f2d5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610697565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000610fa3611351565b610fbf5760405162461bcd60e51b8152600401610697906125c1565b604080516001808252818301909252600091602080830190803683370190505090508281600081518110610ff557610ff561278d565b60200260200101906001600160a01b031690816001600160a01b03168152505061101e816113c0565b9392505050565b61102f33836114a1565b61104b5760405162461bcd60e51b8152600401610697906125f8565b611057848484846119e7565b50505050565b6060611068826112c6565b61109f5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610697565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06110d661059d565b60c960cc60ca8760ce546040518763ffffffff1660e01b815260040161110196959493929190612489565b60006040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610597919081019061221c565b3361115e610eb5565b6001600160a01b0316146111845760405162461bcd60e51b81526004016106979061258c565b81516111979060cc906020850190611da7565b5080516107c89060ca906020840190611da7565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b336111e2610eb5565b6001600160a01b0316146112085760405162461bcd60e51b81526004016106979061258c565b6001600160a01b03811661126d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610697565b610c6181611995565b60006001600160e01b031982166380ac58cd60e01b14806112a757506001600160e01b03198216635b5e139f60e01b145b8061059757506301ffc9a760e01b6001600160e01b0319831614610597565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061131882610c64565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60003361135c610eb5565b6001600160a01b031614156113715750600190565b6000805260d16020527efa5413e7b01fc543d01f0911de573ace463b956369df4472f39030e8d98b775460ff16156113a95750600190565b5033600090815260d1602052604090205460ff1690565b6000806113cc60cf5490565b9050600060018451836113df91906126a0565b6113e991906126f9565b905060ce54600014806113fe575060ce548111155b6114355760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610697565b8061143f60cf5490565b1161149557611482848361145260cf5490565b61145c91906126f9565b8151811061146c5761146c61278d565b602002602001015161147d60cf5490565b611a1a565b61149060cf80546001019055565b611435565b60cf545b949350505050565b60006114ac826112c6565b61150d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610697565b600061151883610c64565b9050806001600160a01b0316846001600160a01b031614806115535750836001600160a01b03166115488461062f565b6001600160a01b0316145b80611499575061149981856111ab565b826001600160a01b031661157682610c64565b6001600160a01b0316146115de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610697565b6001600160a01b0382166116405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610697565b61164b6000826112e3565b6001600160a01b03831660009081526068602052604081208054600192906116749084906126f9565b90915550506001600160a01b03821660009081526068602052604081208054600192906116a29084906126a0565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206127d083398151915291a4505050565b600054610100900460ff168061170a575060005460ff16155b6117265760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015611748576000805461ffff19166101011790555b611750611b3b565b611758611b3b565b6117628383611ba5565b80156107c8576000805461ff0019169055505050565b600054610100900460ff1680611791575060005460ff16155b6117ad5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff161580156117cf576000805461ffff19166101011790555b6117d7611b3b565b6117df611c3a565b8015610c61576000805461ff001916905550565b804710156118435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610697565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611890576040519150601f19603f3d011682016040523d82523d6000602084013e611895565b606091505b50509050806107c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610697565b600061191782610c64565b90506119246000836112e3565b6001600160a01b038116600090815260686020526040812080546001929061194d9084906126f9565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206127d0833981519152908390a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6119f2848484611563565b6119fe84848484611c9a565b6110575760405162461bcd60e51b8152600401610697906124ec565b6001600160a01b038216611a705760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610697565b611a79816112c6565b15611ac65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610697565b6001600160a01b0382166000908152606860205260408120805460019290611aef9084906126a0565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206127d0833981519152908290a45050565b600054610100900460ff1680611b54575060005460ff16155b611b705760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff161580156117df576000805461ffff19166101011790558015610c61576000805461ff001916905550565b600054610100900460ff1680611bbe575060005460ff16155b611bda5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015611bfc576000805461ffff19166101011790555b8251611c0f906065906020860190611da7565b508151611c23906066906020850190611da7565b5080156107c8576000805461ff0019169055505050565b600054610100900460ff1680611c53575060005460ff16155b611c6f5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015611c91576000805461ffff19166101011790555b6117df33611995565b60006001600160a01b0384163b15611d9c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611cde9033908990889088906004016123fc565b602060405180830381600087803b158015611cf857600080fd5b505af1925050508015611d28575060408051601f3d908101601f19168201909252611d25918101906121ff565b60015b611d82573d808015611d56576040519150601f19603f3d011682016040523d82523d6000602084013e611d5b565b606091505b508051611d7a5760405162461bcd60e51b8152600401610697906124ec565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611499565b506001949350505050565b828054611db39061273c565b90600052602060002090601f016020900481019282611dd55760008555611e1b565b82601f10611dee57805160ff1916838001178555611e1b565b82800160010185558215611e1b579182015b82811115611e1b578251825591602001919060010190611e00565b50611e27929150611e2b565b5090565b5b80821115611e275760008155600101611e2c565b6000611e53611e4e84612679565b612649565b9050828152838383011115611e6757600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114611e9557600080fd5b919050565b600082601f830112611eab57600080fd5b61101e83833560208501611e40565b600060208284031215611ecc57600080fd5b61101e82611e7e565b60008060408385031215611ee857600080fd5b611ef183611e7e565b9150611eff60208401611e7e565b90509250929050565b600080600060608486031215611f1d57600080fd5b611f2684611e7e565b9250611f3460208501611e7e565b9150604084013590509250925092565b60008060008060808587031215611f5a57600080fd5b611f6385611e7e565b9350611f7160208601611e7e565b92506040850135915060608501356001600160401b03811115611f9357600080fd5b8501601f81018713611fa457600080fd5b611fb387823560208401611e40565b91505092959194509250565b60008060408385031215611fd257600080fd5b611fdb83611e7e565b915060208301358015158114611ff057600080fd5b809150509250929050565b6000806000806000806000806000806101408b8d03121561201b57600080fd5b6120248b611e7e565b995060208b01356001600160401b038082111561204057600080fd5b61204c8e838f01611e9a565b9a5060408d013591508082111561206257600080fd5b61206e8e838f01611e9a565b995060608d013591508082111561208457600080fd5b6120908e838f01611e9a565b985060808d01359150808211156120a657600080fd5b6120b28e838f01611e9a565b975060a08d0135965060c08d01359150808211156120cf57600080fd5b506120dc8d828e01611e9a565b94505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6000806040838503121561211857600080fd5b61212183611e7e565b946020939093013593505050565b6000602080838503121561214257600080fd5b82356001600160401b038082111561215957600080fd5b818501915085601f83011261216d57600080fd5b81358181111561217f5761217f6127a3565b8060051b9150612190848301612649565b8181528481019084860184860187018a10156121ab57600080fd5b600095505b838610156121d5576121c181611e7e565b8352600195909501949186019186016121b0565b5098975050505050505050565b6000602082840312156121f457600080fd5b813561101e816127b9565b60006020828403121561221157600080fd5b815161101e816127b9565b60006020828403121561222e57600080fd5b81516001600160401b0381111561224457600080fd5b8201601f8101841361225557600080fd5b8051612263611e4e82612679565b81815285602083850101111561227857600080fd5b612289826020830160208601612710565b95945050505050565b600080604083850312156122a557600080fd5b82356001600160401b03808211156122bc57600080fd5b6122c886838701611e9a565b935060208501359150808211156122de57600080fd5b506122eb85828601611e9a565b9150509250929050565b60006020828403121561230757600080fd5b5035919050565b6000806040838503121561232157600080fd5b50508035926020909101359150565b60008151808452612348816020860160208601612710565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061237657607f831692505b602080841082141561239857634e487b7160e01b600052602260045260246000fd5b838852602088018280156123b357600181146123c4576123ef565b60ff198716825282820197506123ef565b60008981526020902060005b878110156123e9578154848201529086019084016123d0565b83019850505b5050505050505092915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061242f90830184612330565b9695505050505050565b60208152600061101e6020830184612330565b60808152600061245f6080830187612330565b85602084015282810360408401526124778186612330565b91505082606083015295945050505050565b60c08152600061249c60c0830189612330565b82810360208401526124ae818961235c565b905082810360408401526124c2818861235c565b905082810360608401526124d6818761235c565b6080840195909552505060a00152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4e6565647320746f20626520616e20616c6c6f776564206d696e746572000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f191681016001600160401b0381118282101715612671576126716127a3565b604052919050565b60006001600160401b03821115612692576126926127a3565b50601f01601f191660200190565b600082198211156126b3576126b3612777565b500190565b6000826126d557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156126f4576126f4612777565b500290565b60008282101561270b5761270b612777565b500390565b60005b8381101561272b578181015183820152602001612713565b838111156110575750506000910152565b600181811c9082168061275057607f821691505b6020821081141561277157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610c6157600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202fcae85a3404afc03642dc696912740c8133a543b5392e7e766901317e3b19d464736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101985760003560e01c806342966c68116100e2578063a66ff0af11610085578063a66ff0af14610486578063b88d4fde146104a6578063c87b56dd146104c6578063e444bfcc146104e6578063e985e9c514610506578063f2fde38b14610526578063f4ed0f4614610546578063f51f96dd1461055c57600080fd5b806342966c68146103bf5780636352211e146103df57806364edfbf0146103ff57806370a0823114610407578063715018a6146104275780638da5cb5b1461043c57806395d89b4114610451578063a22cb4651461046657600080fd5b80631919fed71161014a5780631919fed7146102a657806323b872dd146102c657806325f0ea90146102e657806328c5440f1461030657806329ec16dd1461032b5780632a55205a1461034b5780633ccfd60b1461038a57806342842e0e1461039f57600080fd5b806301ffc9a71461019d57806306fdde03146101d2578063081812fc146101f4578063095ea7b31461022c5780630b65b6e71461024e5780630f6a93491461027157806318160ddd14610291575b600080fd5b3480156101a957600080fd5b506101bd6101b83660046121e2565b610572565b60405190151581526020015b60405180910390f35b3480156101de57600080fd5b506101e761059d565b6040516101c99190612439565b34801561020057600080fd5b5061021461020f3660046122f5565b61062f565b6040516001600160a01b0390911681526020016101c9565b34801561023857600080fd5b5061024c610247366004612105565b6106bc565b005b34801561025a57600080fd5b506102636107cd565b6040519081526020016101c9565b34801561027d57600080fd5b5061026361028c36600461212f565b610801565b34801561029d57600080fd5b50610263610830565b3480156102b257600080fd5b5061024c6102c13660046122f5565b61083d565b3480156102d257600080fd5b5061024c6102e1366004611f08565b6108a7565b3480156102f257600080fd5b5061024c610301366004611ffb565b6108d9565b34801561031257600080fd5b5061031b6109c8565b6040516101c9949392919061244c565b34801561033757600080fd5b5061024c610346366004611fbf565b610b00565b34801561035757600080fd5b5061036b61036636600461230e565b610b5a565b604080516001600160a01b0390931683526020830191909152016101c9565b34801561039657600080fd5b5061024c610bb7565b3480156103ab57600080fd5b5061024c6103ba366004611f08565b610bf9565b3480156103cb57600080fd5b5061024c6103da3660046122f5565b610c14565b3480156103eb57600080fd5b506102146103fa3660046122f5565b610c64565b610263610cdb565b34801561041357600080fd5b50610263610422366004611eba565b610df5565b34801561043357600080fd5b5061024c610e7c565b34801561044857600080fd5b50610214610eb5565b34801561045d57600080fd5b506101e7610ec9565b34801561047257600080fd5b5061024c610481366004611fbf565b610ed8565b34801561049257600080fd5b506102636104a1366004611eba565b610f99565b3480156104b257600080fd5b5061024c6104c1366004611f44565b611025565b3480156104d257600080fd5b506101e76104e13660046122f5565b61105d565b3480156104f257600080fd5b5061024c610501366004612292565b611155565b34801561051257600080fd5b506101bd610521366004611ed5565b6111ab565b34801561053257600080fd5b5061024c610541366004611eba565b6111d9565b34801561055257600080fd5b5061026360ce5481565b34801561056857600080fd5b5061026360d25481565b600063152a902d60e11b6001600160e01b031983161480610597575061059782611276565b92915050565b6060606580546105ac9061273c565b80601f01602080910402602001604051908101604052809291908181526020018280546105d89061273c565b80156106255780601f106105fa57610100808354040283529160200191610625565b820191906000526020600020905b81548152906001019060200180831161060857829003601f168201915b5050505050905090565b600061063a826112c6565b6106a05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006106c782610c64565b9050806001600160a01b0316836001600160a01b031614156107355760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610697565b336001600160a01b0382161480610751575061075181336111ab565b6107be5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610697565b6107c883836112e3565b505050565b600060ce54600014156107e1575060001990565b60cf5460ce546107f29060016126a0565b6107fc91906126f9565b905090565b600061080b611351565b6108275760405162461bcd60e51b8152600401610697906125c1565b610597826113c0565b600060016107f260cf5490565b33610846610eb5565b6001600160a01b03161461086c5760405162461bcd60e51b81526004016106979061258c565b60d28190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6108b2335b826114a1565b6108ce5760405162461bcd60e51b8152600401610697906125f8565b6107c8838383611563565b600054610100900460ff16806108f2575060005460ff16155b61090e5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015610930576000805461ffff19166101011790555b61093a8a8a6116f1565b610942611778565b61094b8b6111d9565b875161095e9060c99060208b0190611da7565b5086516109729060ca9060208a0190611da7565b5060cb869055845161098b9060cc906020880190611da7565b5060cd84905560ce83905560d08290556109a960cf80546001019055565b80156109bb576000805461ff00191690555b5050505050505050505050565b606060006060600060cc60cd5460ca60cb548380546109e69061273c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a129061273c565b8015610a5f5780601f10610a3457610100808354040283529160200191610a5f565b820191906000526020600020905b815481529060010190602001808311610a4257829003601f168201915b50505050509350818054610a729061273c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9e9061273c565b8015610aeb5780601f10610ac057610100808354040283529160200191610aeb565b820191906000526020600020905b815481529060010190602001808311610ace57829003601f168201915b50505050509150935093509350935090919293565b33610b09610eb5565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016106979061258c565b6001600160a01b0391909116600090815260d160205260409020805460ff1916911515919091179055565b60008080610b66610eb5565b6001600160a01b03161415610b8857610b7d610eb5565b600091509150610bb0565b610b90610eb5565b61271060d05485610ba191906126da565b610bab91906126b8565b915091505b9250929050565b33610bc0610eb5565b6001600160a01b031614610be65760405162461bcd60e51b81526004016106979061258c565b610bf7610bf1610eb5565b476117f3565b565b6107c883838360405180602001604052806000815250611025565b610c1d336108ac565b610c585760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b6044820152606401610697565b610c618161190c565b50565b6000818152606760205260408120546001600160a01b0316806105975760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610697565b60008060d25411610d1d5760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b6044820152606401610697565b60d2543414610d5c5760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720707269636560a81b6044820152606401610697565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110610d9257610d9261278d565b6001600160a01b0390921660209283029190910182015260d2546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1610def816113c0565b91505090565b60006001600160a01b038216610e605760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610697565b506001600160a01b031660009081526068602052604090205490565b33610e85610eb5565b6001600160a01b031614610eab5760405162461bcd60e51b81526004016106979061258c565b610bf76000611995565b60006107fc6097546001600160a01b031690565b6060606680546105ac9061273c565b6001600160a01b038216331415610f2d5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610697565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000610fa3611351565b610fbf5760405162461bcd60e51b8152600401610697906125c1565b604080516001808252818301909252600091602080830190803683370190505090508281600081518110610ff557610ff561278d565b60200260200101906001600160a01b031690816001600160a01b03168152505061101e816113c0565b9392505050565b61102f33836114a1565b61104b5760405162461bcd60e51b8152600401610697906125f8565b611057848484846119e7565b50505050565b6060611068826112c6565b61109f5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610697565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df30dba06110d661059d565b60c960cc60ca8760ce546040518763ffffffff1660e01b815260040161110196959493929190612489565b60006040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610597919081019061221c565b3361115e610eb5565b6001600160a01b0316146111845760405162461bcd60e51b81526004016106979061258c565b81516111979060cc906020850190611da7565b5080516107c89060ca906020840190611da7565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b336111e2610eb5565b6001600160a01b0316146112085760405162461bcd60e51b81526004016106979061258c565b6001600160a01b03811661126d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610697565b610c6181611995565b60006001600160e01b031982166380ac58cd60e01b14806112a757506001600160e01b03198216635b5e139f60e01b145b8061059757506301ffc9a760e01b6001600160e01b0319831614610597565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061131882610c64565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60003361135c610eb5565b6001600160a01b031614156113715750600190565b6000805260d16020527efa5413e7b01fc543d01f0911de573ace463b956369df4472f39030e8d98b775460ff16156113a95750600190565b5033600090815260d1602052604090205460ff1690565b6000806113cc60cf5490565b9050600060018451836113df91906126a0565b6113e991906126f9565b905060ce54600014806113fe575060ce548111155b6114355760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610697565b8061143f60cf5490565b1161149557611482848361145260cf5490565b61145c91906126f9565b8151811061146c5761146c61278d565b602002602001015161147d60cf5490565b611a1a565b61149060cf80546001019055565b611435565b60cf545b949350505050565b60006114ac826112c6565b61150d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610697565b600061151883610c64565b9050806001600160a01b0316846001600160a01b031614806115535750836001600160a01b03166115488461062f565b6001600160a01b0316145b80611499575061149981856111ab565b826001600160a01b031661157682610c64565b6001600160a01b0316146115de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610697565b6001600160a01b0382166116405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610697565b61164b6000826112e3565b6001600160a01b03831660009081526068602052604081208054600192906116749084906126f9565b90915550506001600160a01b03821660009081526068602052604081208054600192906116a29084906126a0565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206127d083398151915291a4505050565b600054610100900460ff168061170a575060005460ff16155b6117265760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015611748576000805461ffff19166101011790555b611750611b3b565b611758611b3b565b6117628383611ba5565b80156107c8576000805461ff0019169055505050565b600054610100900460ff1680611791575060005460ff16155b6117ad5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff161580156117cf576000805461ffff19166101011790555b6117d7611b3b565b6117df611c3a565b8015610c61576000805461ff001916905550565b804710156118435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610697565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611890576040519150601f19603f3d011682016040523d82523d6000602084013e611895565b606091505b50509050806107c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610697565b600061191782610c64565b90506119246000836112e3565b6001600160a01b038116600090815260686020526040812080546001929061194d9084906126f9565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206127d0833981519152908390a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6119f2848484611563565b6119fe84848484611c9a565b6110575760405162461bcd60e51b8152600401610697906124ec565b6001600160a01b038216611a705760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610697565b611a79816112c6565b15611ac65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610697565b6001600160a01b0382166000908152606860205260408120805460019290611aef9084906126a0565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206127d0833981519152908290a45050565b600054610100900460ff1680611b54575060005460ff16155b611b705760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff161580156117df576000805461ffff19166101011790558015610c61576000805461ff001916905550565b600054610100900460ff1680611bbe575060005460ff16155b611bda5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015611bfc576000805461ffff19166101011790555b8251611c0f906065906020860190611da7565b508151611c23906066906020850190611da7565b5080156107c8576000805461ff0019169055505050565b600054610100900460ff1680611c53575060005460ff16155b611c6f5760405162461bcd60e51b81526004016106979061253e565b600054610100900460ff16158015611c91576000805461ffff19166101011790555b6117df33611995565b60006001600160a01b0384163b15611d9c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611cde9033908990889088906004016123fc565b602060405180830381600087803b158015611cf857600080fd5b505af1925050508015611d28575060408051601f3d908101601f19168201909252611d25918101906121ff565b60015b611d82573d808015611d56576040519150601f19603f3d011682016040523d82523d6000602084013e611d5b565b606091505b508051611d7a5760405162461bcd60e51b8152600401610697906124ec565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611499565b506001949350505050565b828054611db39061273c565b90600052602060002090601f016020900481019282611dd55760008555611e1b565b82601f10611dee57805160ff1916838001178555611e1b565b82800160010185558215611e1b579182015b82811115611e1b578251825591602001919060010190611e00565b50611e27929150611e2b565b5090565b5b80821115611e275760008155600101611e2c565b6000611e53611e4e84612679565b612649565b9050828152838383011115611e6757600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114611e9557600080fd5b919050565b600082601f830112611eab57600080fd5b61101e83833560208501611e40565b600060208284031215611ecc57600080fd5b61101e82611e7e565b60008060408385031215611ee857600080fd5b611ef183611e7e565b9150611eff60208401611e7e565b90509250929050565b600080600060608486031215611f1d57600080fd5b611f2684611e7e565b9250611f3460208501611e7e565b9150604084013590509250925092565b60008060008060808587031215611f5a57600080fd5b611f6385611e7e565b9350611f7160208601611e7e565b92506040850135915060608501356001600160401b03811115611f9357600080fd5b8501601f81018713611fa457600080fd5b611fb387823560208401611e40565b91505092959194509250565b60008060408385031215611fd257600080fd5b611fdb83611e7e565b915060208301358015158114611ff057600080fd5b809150509250929050565b6000806000806000806000806000806101408b8d03121561201b57600080fd5b6120248b611e7e565b995060208b01356001600160401b038082111561204057600080fd5b61204c8e838f01611e9a565b9a5060408d013591508082111561206257600080fd5b61206e8e838f01611e9a565b995060608d013591508082111561208457600080fd5b6120908e838f01611e9a565b985060808d01359150808211156120a657600080fd5b6120b28e838f01611e9a565b975060a08d0135965060c08d01359150808211156120cf57600080fd5b506120dc8d828e01611e9a565b94505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6000806040838503121561211857600080fd5b61212183611e7e565b946020939093013593505050565b6000602080838503121561214257600080fd5b82356001600160401b038082111561215957600080fd5b818501915085601f83011261216d57600080fd5b81358181111561217f5761217f6127a3565b8060051b9150612190848301612649565b8181528481019084860184860187018a10156121ab57600080fd5b600095505b838610156121d5576121c181611e7e565b8352600195909501949186019186016121b0565b5098975050505050505050565b6000602082840312156121f457600080fd5b813561101e816127b9565b60006020828403121561221157600080fd5b815161101e816127b9565b60006020828403121561222e57600080fd5b81516001600160401b0381111561224457600080fd5b8201601f8101841361225557600080fd5b8051612263611e4e82612679565b81815285602083850101111561227857600080fd5b612289826020830160208601612710565b95945050505050565b600080604083850312156122a557600080fd5b82356001600160401b03808211156122bc57600080fd5b6122c886838701611e9a565b935060208501359150808211156122de57600080fd5b506122eb85828601611e9a565b9150509250929050565b60006020828403121561230757600080fd5b5035919050565b6000806040838503121561232157600080fd5b50508035926020909101359150565b60008151808452612348816020860160208601612710565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061237657607f831692505b602080841082141561239857634e487b7160e01b600052602260045260246000fd5b838852602088018280156123b357600181146123c4576123ef565b60ff198716825282820197506123ef565b60008981526020902060005b878110156123e9578154848201529086019084016123d0565b83019850505b5050505050505092915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061242f90830184612330565b9695505050505050565b60208152600061101e6020830184612330565b60808152600061245f6080830187612330565b85602084015282810360408401526124778186612330565b91505082606083015295945050505050565b60c08152600061249c60c0830189612330565b82810360208401526124ae818961235c565b905082810360408401526124c2818861235c565b905082810360608401526124d6818761235c565b6080840195909552505060a00152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4e6565647320746f20626520616e20616c6c6f776564206d696e746572000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f191681016001600160401b0381118282101715612671576126716127a3565b604052919050565b60006001600160401b03821115612692576126926127a3565b50601f01601f191660200190565b600082198211156126b3576126b3612777565b500190565b6000826126d557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156126f4576126f4612777565b500290565b60008282101561270b5761270b612777565b500390565b60005b8381101561272b578181015183820152602001612713565b838111156110575750506000910152565b600181811c9082168061275057607f821691505b6020821081141561277157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610c6157600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202fcae85a3404afc03642dc696912740c8133a543b5392e7e766901317e3b19d464736f6c63430008060033",
  "devdoc": {
    "author": "iain nash Repository: https://github.com/ourzora/nft-editions",
    "details": "This allows creators to mint a unique serial edition of the same media within a custom contract",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn User burn function for token id "
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getURIs()": {
        "details": "Get URIs for edition NFT",
        "returns": {
          "_0": "imageUrl, imageHash, animationUrl, animationHash"
        }
      },
      "initialize(address,string,string,string,string,bytes32,string,bytes32,uint256,uint256)": {
        "details": "Function to create a new edition. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the edition. This can be re-assigned or updated later",
        "params": {
          "_animationHash": "The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.",
          "_animationUrl": "Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs",
          "_description": "Description of edition, used in the description field of the NFT",
          "_editionSize": "Number of editions that can be minted in total. If 0, unlimited editions can be minted.",
          "_imageHash": "SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.",
          "_imageUrl": "Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.",
          "_name": "Name of edition, used in the title as \"$NAME NUMBER/TOTAL\"",
          "_owner": "User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.",
          "_royaltyBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty.",
          "_symbol": "Symbol of the new token contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintEdition(address)": {
        "details": "This mints one edition to the given address by an allowed minter on the edition instance.",
        "params": {
          "to": "address to send the newly minted edition to"
        }
      },
      "mintEditions(address[])": {
        "details": "This mints multiple editions to the given list of addresses.",
        "params": {
          "recipients": "list of addresses to send the newly minted editions to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "purchase()": {
        "details": "This allows the user to purchase a edition edition at the given price in the contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty information for token",
        "params": {
          "_salePrice": "Sale price for the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setApprovedMinter(address,bool)": {
        "details": "Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.",
        "params": {
          "allowed": "boolean if that address is allowed to mint",
          "minter": "address to set approved minting status for"
        }
      },
      "setSalePrice(uint256)": {
        "details": "This sets a simple ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens within the edition"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEditionURLs(string,string)": {
        "details": "Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated."
      },
      "withdraw()": {
        "details": "This withdraws ETH from the contract to the contract owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "numberCanMint()": {
        "notice": "Returns the number of editions allowed to mint (max_uint256 when open edition)"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      }
    },
    "notice": "This is a smart contract for handling dynamic contract minting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 235,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1567,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1890,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 301,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 307,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 311,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 315,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 321,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1117,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2307,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "description",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 2309,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "animationUrl",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 2311,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "animationHash",
        "offset": 0,
        "slot": "203",
        "type": "t_bytes32"
      },
      {
        "astId": 2313,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "imageUrl",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 2315,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "imageHash",
        "offset": 0,
        "slot": "205",
        "type": "t_bytes32"
      },
      {
        "astId": 2317,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "editionSize",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 2320,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "atEditionId",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(Counter)1574_storage"
      },
      {
        "astId": 2322,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "royaltyBPS",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 2326,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2328,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "salePrice",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1574_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1573,
            "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}